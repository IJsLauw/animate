{"version":3,"sources":["../../src/animate/load.js"],"names":["load","options","parent","complete","basePath","loader","metadata","stage","Object","assign","PIXI","loaders","Loader","done","instance","addChild","assets","keys","length","id","data","default","add","once"],"mappings":";;;AAAA;;;;;;;;;;AAUA;;;;;;;;;;;;;;;;;;;;AAoBA;;;;;;;;;;;;;;;;;;;AAmBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmCA,IAAMA,OAAO,SAAPA,IAAO,CAASC,OAAT,EAAkBC,MAAlB,EAA0BC,QAA1B,EAAoCC,QAApC,EAA8CC,MAA9C,EAAsDC,QAAtD,EAAgE;;AAEzE;AACA,QAAI,OAAOJ,MAAP,KAAkB,UAAtB,EAAkC;AAC9BE,mBAAWD,QAAX;AACAA,mBAAWD,MAAX;AACAA,iBAAS,IAAT;AACH,KAJD,MAIO;AACH,YAAI,OAAOC,QAAP,KAAoB,QAAxB,EAAkC;AAC9BC,uBAAWD,QAAX;AACAA,uBAAW,IAAX;AACH;AACJ;;AAED,QAAI,OAAOF,OAAP,KAAmB,UAAvB,EAAmC;AAC/BA,kBAAU;AACNM,mBAAON,OADD;AAENC,oBAAQA,MAFF;AAGNE,sBAAUA,YAAY,EAHhB;AAIND,sBAAUA;AAJJ,SAAV;AAMH;;AAEDF,cAAUO,OAAOC,MAAP,CAAc;AACpBF,eAAO,IADa;AAEpBL,gBAAQ,IAFY;AAGpBE,kBAAU,EAHU;AAIpBD,kBAAU;AAJU,KAAd,EAKPF,WAAW,EALJ,CAAV;;AAOAI,aAASA,SAASA,MAAT,GAAkB,IAAIK,KAAKC,OAAL,CAAaC,MAAjB,EAA3B;;AAEA,aAASC,IAAT,GAAgB;AACZ,YAAIC,WAAW,IAAIb,QAAQM,KAAZ,EAAf;AACA,YAAIN,QAAQC,MAAZ,EAAoB;AAChBD,oBAAQC,MAAR,CAAea,QAAf,CAAwBD,QAAxB;AACH;AACD,YAAIb,QAAQE,QAAZ,EAAsB;AAClBF,oBAAQE,QAAR,CAAiBW,QAAjB,EAA2BT,MAA3B;AACH;AACJ;;AAED;AACA,QAAIW,SAASf,QAAQM,KAAR,CAAcS,MAAd,IAAwB,EAArC;AACA,QAAIA,UAAUR,OAAOS,IAAP,CAAYD,MAAZ,EAAoBE,MAAlC,EAA0C;AACtC;AACA,YAAId,YAAWH,QAAQG,QAAvB;AACA,YAAIA,SAAJ,EAAc;AACVA,yBAAY,GAAZ;AACH;AACD,aAAK,IAAIe,EAAT,IAAeH,MAAf,EAAuB;AACnB,gBAAII,OAAO,IAAX;AACA,gBAAGd,QAAH,EAAa;AACT;AACA,oBAAGA,SAASa,EAAT,CAAH,EAAiB;AACbC,2BAAOd,SAASa,EAAT,CAAP;AACH;AACD;AAHA,qBAIK,IAAIb,SAASe,OAAb,EAAqB;AACtBD,+BAAOd,SAASe,OAAhB;AACH;AACJ;AACDhB,mBAAOiB,GAAP,CAAWH,EAAX,EAAef,YAAWY,OAAOG,EAAP,CAA1B,EAAsCC,IAAtC;AACH;AACDf,eAAOkB,IAAP,CAAY,UAAZ,EAAwBV,IAAxB,EAA8Bb,IAA9B;AACH,KArBD,MAqBO;AACH;AACAa;AACH;;AAED,WAAOR,MAAP;AACH,CAvED;;kBAyEeL,I","file":"load.js","sourcesContent":["/**\n * Load the stage class and preload any assets\n * @method PIXI.animate.load\n * @param {Object} options Options for loading.\n * @param {Function} options.stage Reference to the stage class\n * @param {Object} [options.stage.assets] Assets used to preload\n * @param {PIXI.Container} options.parent The Container to auto-add the stage to.\n * @param {String} [options.basePath] Base root directory\n * @return {PIXI.loaders.Loader} instance of PIXI resource loader\n */\n/**\n * Load the stage class and preload any assets\n * ```\n * let renderer = new PIXI.autoDetectRenderer(1280, 720);\n * let stage = new PIXI.Container();\n * PIXI.animate.load(lib.MyStage, function(instance){\n *     stage.addChild(instance);\n * });\n * function update() {\n *      renderer.render(stage);\n *      update();\n * }\n * update();\n * ```\n * @method PIXI.animate.load\n * @param {Function} StageRef Reference to the stage class.\n * @param {Object} [StageRef.assets] Assets used to preload.\n * @param {Function} complete The callback function when complete.\n * @return {PIXI.loaders.Loader} instance of PIXI resource loader\n */\n/**\n * Load the stage class and preload any assets\n * ```\n * let renderer = new PIXI.autoDetectRenderer(1280, 720);\n * let stage = new PIXI.Container();\n * PIXI.animate.load(lib.MyStage, stage);\n * function update() {\n *      renderer.render(stage);\n *      update();\n * }\n * update();\n * ```\n * @method PIXI.animate.load\n * @param {Function} StageRef Reference to the stage class.\n * @param {Object} [StageRef.assets] Assets used to preload.\n * @param {PIXI.Container} parent The Container to auto-add the stage to.\n * @param {String} [basePath] Base root directory\n * @return {PIXI.loaders.Loader} instance of PIXI resource loader\n */\n/**\n * Load the stage class and preload any assets\n * ```\n * let basePath = \"file:/path/to/assets\";\n * let renderer = new PIXI.autoDetectRenderer(1280, 720);\n * \n * let extensions = PIXI.compressedTextures.detectExtensions(renderer);\n * let loader = new PIXI.loaders.Loader();\n * // this is an example of setting up a pre loader plugin to handle compressed textures in this case\n * loader.pre(PIXI.compressedTextures.extensionChooser(extensions));\n * \n * // specify metadata this way if you want to provide a default loading strategy for all assets listed in the PIXI animation\n * let metadata = { default: { metadata: { imageMetadata: { choice: [\".crn\"] } } } };\n * // specify metadata this way if you want to provide a specific loading strategy for a certain asset listed inside the PIXI animation library\n * let metadata = { MyStage_atlas_1: { metadata: { imageMetadata: { choice: [\".crn\"] } } } };\n * \n * let stage = new PIXI.Container();\n * PIXI.animate.load(lib.MyStage, stage, ()=>{}, basePath, loader, metadata);\n * function update() {\n *      renderer.render(stage);\n *      update();\n * }\n * update();\n * ```\n * @method PIXI.animate.load\n * @param {Function} StageRef Reference to the stage class.\n * @param {Object} [StageRef.assets] Assets used to preload.\n * @param {PIXI.Container} parent The Container to auto-add the stage to.\n * @param {Function} [complete] The callback function when complete.\n * @param {String} [basePath] Base root directory\n * @param {PIXI.loaders.Loader} [loader] A Pixi loader object\n * @param {Object} [metadata] A metadata object for the asset being loaded\n * @return {PIXI.loaders.Loader} instance of PIXI resource loader\n */\n\nconst load = function(options, parent, complete, basePath, loader, metadata) {\n\n    // Support arguments (ref, complete, basePath)\n    if (typeof parent === \"function\") {\n        basePath = complete;\n        complete = parent;\n        parent = null;\n    } else {\n        if (typeof complete === \"string\") {\n            basePath = complete;\n            complete = null;\n        }\n    }\n\n    if (typeof options === \"function\") {\n        options = {\n            stage: options,\n            parent: parent,\n            basePath: basePath || \"\",\n            complete: complete\n        };\n    }\n\n    options = Object.assign({\n        stage: null,\n        parent: null,\n        basePath: '',\n        complete: null\n    }, options || {});\n\n    loader = loader ? loader : new PIXI.loaders.Loader();\n\n    function done() {\n        let instance = new options.stage();\n        if (options.parent) {\n            options.parent.addChild(instance);\n        }\n        if (options.complete) {\n            options.complete(instance, loader);\n        }\n    }\n\n    // Check for assets to preload\n    let assets = options.stage.assets || {};\n    if (assets && Object.keys(assets).length) {\n        // assetBaseDir can accept either with trailing slash or not\n        let basePath = options.basePath;\n        if (basePath) {\n            basePath += \"/\";\n        }\n        for (let id in assets) {\n            var data = null;\n            if(metadata) {\n                // if the metadata was supplied for this particular asset, use these options\n                if(metadata[id]) {\n                    data = metadata[id];\n                }\n                // if the metadata supplied a default option\n                else if (metadata.default){\n                    data = metadata.default;\n                }\n            }\n            loader.add(id, basePath + assets[id], data);\n        }\n        loader.once('complete', done).load();\n    } else {\n        // tiny case where there's only text and no shapes/animations\n        done();\n    }\n\n    return loader;\n};\n\nexport default load;\n"]}