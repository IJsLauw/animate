{"version":3,"sources":["../../src/mixins/Graphics.js"],"names":["p","PIXI","Graphics","prototype","drawCommands","d","commands","currentCommand","params","i","length","item","undefined","apply","push","c","closePath","h","addHole","m","moveTo","l","lineTo","q","quadraticCurveTo","b","bezierCurveTo","f","beginFill","s","lineStyle","dr","drawRect","rr","drawRoundedRect","rc","dc","drawCircle","ar","arc","at","arcTo","de","drawEllipse","lf","colorArray","console","warn","rf","bf","sd","bs","ls","rs"],"mappings":"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","file":"Graphics.js","sourcesContent":["/**\n * Mixins for the PIXI.Graphics class.\n * @memberof PIXI\n * @class Graphics\n */\nconst p = PIXI.Graphics.prototype;\n\n/**\n * Shortcut for `drawCommands`.\n * @method PIXI.Graphics#d\n * @param  {Array} commands The commands and parameters to draw\n * @return {PIXI.Graphics}\n */\n/**\n * Execute a series of commands, this is the name of the short function\n * followed by the parameters, e.g., `[\"f\", \"#ff0000\", \"r\", 0, 0, 100, 200]`\n * @method PIXI.Graphics#drawCommands\n * @param  {Array} commands The commands and parameters to draw\n * @return {PIXI.Graphics}\n */\np.drawCommands = p.d = function(commands) {\n    var currentCommand, params = [],\n        i = 0;\n\n    while (i <= commands.length) {\n        var item = commands[i++];\n        if (item === undefined || this[item]) {\n            if (currentCommand) {\n                this[currentCommand].apply(this, params);\n                params.length = 0;\n            }\n            currentCommand = item;\n        } else {\n            params.push(item);\n        }\n    }\n    return this;\n};\n\n/**\n * Closes the current path, effectively drawing a line from the current drawing point to the first drawing point specified\n * since the fill or stroke was last set.\n * @method PIXI.Graphics#c\n * @return {PIXI.Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n **/\np.c = p.closePath;\n\n/**\n * Alias for `addHole`\n * @method PIXI.Graphics#h\n * @return {PIXI.Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n **/\np.h = p.addHole;\n\n/**\n * Shortcut to `moveTo`.\n * @method PIXI.Graphics#m\n * @param {Number} x The x coordinate the drawing point should move to.\n * @param {Number} y The y coordinate the drawing point should move to.\n * @return {PIXI.Graphics} The Graphics instance the method is called on (useful for chaining calls).\n **/\np.m = p.moveTo;\n\n/**\n * Shortcut to `lineTo`.\n * @method PIXI.Graphics#l\n * @param {Number} x The x coordinate the drawing point should draw to.\n * @param {Number} y The y coordinate the drawing point should draw to.\n * @return {PIXI.Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n **/\np.l = p.lineTo;\n\n/**\n * Draws a quadratic curve from the current drawing point to (x, y) using the control point (cpx, cpy). For detailed\n * information, read the <a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#dom-context-2d-quadraticcurveto\">\n * whatwg spec</a>. A tiny API method \"qt\" also exists.\n * @method PIXI.Graphics#q\n * @param {Number} cpx\n * @param {Number} cpy\n * @param {Number} x\n * @param {Number} y\n * @return {PIXI.Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n **/\np.q = p.quadraticCurveTo;\n\n/**\n * Shortcut to `bezierCurveTo`.\n * @method PIXI.Graphics#b\n * @param {Number} cp1x\n * @param {Number} cp1y\n * @param {Number} cp2x\n * @param {Number} cp2y\n * @param {Number} x\n * @param {Number} y\n * @return {PIXI.Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n **/\np.b = p.bezierCurveTo;\n\n/**\n * Shortcut to `beginFill`.\n * @method PIXI.Graphics#f\n * @param {Uint} color The hex color value (e.g. 0xFFFFFF)\n * null will result in no fill.\n * @param {Number} [alpha=1] The alpha value of fill\n * @return {PIXI.Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n **/\np.f = p.beginFill;\n\n/**\n * Shortcut to `lineStyle`.\n * @method PIXI.Graphics#s\n * @param {String} color A CSS compatible color value (ex. \"#FF0000\", \"red\", or \"rgba(255,0,0,0.5)\"). Setting to\n * null will result in no stroke.\n * @param {Number} [thickness=1] The thickness of the stroke\n * @param {Number} [alpha=1] The alpha value from 0 (invisibile) to 1 (visible)\n * @return {PIXI.Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n **/\np.s = p.lineStyle;\n\n/**\n * Shortcut to `drawRect`.\n * @method PIXI.Graphics#dr\n * @param {Number} x\n * @param {Number} y\n * @param {Number} w Width of the rectangle\n * @param {Number} h Height of the rectangle\n * @return {PIXI.Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n **/\n/**\n * Shortcut to `drawRect`.\n * @method PIXI.Graphics#r\n * @param {Number} x\n * @param {Number} y\n * @param {Number} w Width of the rectangle\n * @param {Number} h Height of the rectangle\n * @return {PIXI.Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n **/\np.dr = p.drawRect;\n\n/**\n * Shortcut to `drawRoundedRect`.\n * @method PIXI.Graphics#rr\n * @param {Number} x\n * @param {Number} y\n * @param {Number} w Width of the rectangle\n * @param {Number} h Height of the rectangle\n * @param {Number} radius The corner radius\n * @return {PIXI.Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n **/\np.rr = p.drawRoundedRect;\n\n/**\n * Shortcut to `drawRoundedRect`.\n * @method PIXI.Graphics#rc\n * @param {Number} x\n * @param {Number} y\n * @param {Number} w Width of the rectangle\n * @param {Number} h Height of the rectangle\n * @param {Number} radiusTL The top left corner radius\n * @param {Number} radiusTR The top right corner radius\n * @param {Number} radiusBR The bottom right corner radius\n * @param {Number} radiusBL The bottom left corner radius\n * @return {PIXI.Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n **/\np.rc = p.drawRoundedRect;\n\n/**\n * Shortcut to `drawCircle`.\n * @method PIXI.Graphics#dc\n * @param {Number} x x coordinate center point of circle.\n * @param {Number} y y coordinate center point of circle.\n * @param {Number} radius Radius of circle.\n * @return {PIXI.Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n **/\np.dc = p.drawCircle;\n\n/**\n * Shortcut to `arc`.\n * @method PIXI.Graphics#ac\n * @param {Number} x\n * @param {Number} y\n * @param {Number} radius\n * @param {Number} startAngle Measured in radians.\n * @param {Number} endAngle Measured in radians.\n * @param {Boolean} anticlockwise\n * @return {PIXI.Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n **/\np.ar = p.arc;\n\n/**\n * Shortcut to `arcTo`.\n * @method PIXI.Graphics#at\n * @param {Number} x1\n * @param {Number} y1\n * @param {Number} x2\n * @param {Number} y2\n * @param {Number} radius\n * @return {PIXI.Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n **/\np.at = p.arcTo;\n\n/**\n * Shortcut to `drawEllipse`.\n * @method  PIXI.Graphics#de\n * @param  {Number} x      [description]\n * @param  {Number} y      [description]\n * @param  {Number} width  [description]\n * @param  {Number} height [description]\n */\np.de = p.drawEllipse;\n\n/**\n * Placeholder method for a linear fill. Pixi does not support linear fills,\n * so we just pick the first color in colorArray\n * @method PIXI.Graphics#lf\n * @param {Array} colorArray An array of CSS compatible color values @see `f`\n * @return {PIXI.Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n **/\np.lf = function(colorArray) {\n    // @if DEBUG\n    console.warn(\"Linear gradient fills are not supported\");\n    // @endif\n    return this.f(colorArray[0]);\n};\n\n/**\n * Placeholder method for a radial fill. Pixi does not support radial fills,\n * so we just pick the first color in colorArray\n * @method PIXI.Graphics#rf\n * @param {Array} colorArray An array of CSS compatible color values @see `f`\n * @return {PIXI.Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n **/\np.rf = function(colorArray) {\n    // @if DEBUG\n    console.warn(\"Radial gradient fills are not supported\");\n    // @endif\n    return this.f(colorArray[0]);\n};\n\n/**\n * Placeholder method for a `beginBitmapFill`. Pixi does not support bitmap fills.\n * @method PIXI.Graphics#bf\n * @return {PIXI.Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n **/\np.bf = function() {\n    // @if DEBUG\n    console.warn(\"Bitmap fills are not supported\");\n    // @endif\n    return this.f(0x0);\n};\n\n/**\n * Placeholder method for a `setStrokeDash`. Pixi does not support dashed strokes.\n * @method PIXI.Graphics#sd\n * @return {PIXI.Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n **/\np.sd = function() {\n    // @if DEBUG\n    console.warn(\"Dashed strokes are not supported\");\n    // @endif\n    return this;\n};\n\n/**\n * Placeholder method for a `beginBitmapStroke`. Pixi does not support bitmap strokes.\n * @method PIXI.Graphics#bs\n * @return {PIXI.Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n **/\np.bs = function() {\n    // @if DEBUG\n    console.warn(\"Bitmap strokes are not supported\");\n    // @endif\n    return this;\n};\n\n/**\n * Placeholder method for a `beginLinearGradientStroke`. Pixi does not support gradient strokes.\n * @method PIXI.Graphics#ls\n * @return {PIXI.Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n **/\np.ls = function() {\n    // @if DEBUG\n    console.warn(\"Linear gradient strokes are not supported\");\n    // @endif\n    return this;\n};\n\n/**\n * Placeholder method for a `beginRadialGradientStroke`. Pixi does not support gradient strokes.\n * @method PIXI.Graphics#rs\n * @return {PIXI.Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n **/\np.rs = function() {\n    // @if DEBUG\n    console.warn(\"Radial gradient strokes are not supported\");\n    // @endif\n    return this;\n};"]}